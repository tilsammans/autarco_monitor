{"name":"SolarEdge Monitor","type":"com.fibaro.powerMeter","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_1268"},"sections":{"items":[{"components":[{"name":"label","style":{"weight":"1.2"},"text":"Label","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_1268"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"systemUnits","type":"string","value":"Metrics"},{"name":"interval","type":"string","value":"360"},{"name":"httpTimeout","type":"string","value":"5"},{"name":"pause","type":"string","value":"true"},{"name":"siteID","value":"0"},{"name":"apiKey","value":"0"},{"name":"solarM2","value":"0"},{"name":"debugLevel","value":"1"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP SolarEdge Monitor\n\n-- This QuickApp monitors your SolarEdge managed Solar Panels\n-- The QuickApp has (child) devices for Solar Power, Lastday Data, Lastmonth Data, Lastyear Data and Lifetime Data\n-- The Solar Production values are only requested from the SolarEdge Cloud between sunrise and sunset\n-- The QuickApp also shows the Environmental Benefits in the labels for CO2, SO2, NOX, Trees planted and Lightbulbs\n-- The QuickApp also shows the SolarEdge Installation details in the labels\n-- The Environmental Benefits are updated once a day after 12:00 hour\n-- The settings for Peak Power and Currency are retrieved from the inverter \n-- The rateType interface of Child device Last Day is automatically set to \"production\" and values from this child devices can be used for the Energy Panel \n-- The readings for lastyear and lifetime energy are automatically set to the right Wh unit (Wh, kWh, MWh or GWh) \n-- See API documentation on https://www.solaredge.com/sites/default/files/se_monitoring_api.pdf \n\n\n-- Changes version 2.1 (3rd April 2022)\n-- Solved bug with child device lastDay showeing incorrect values in energy panel\n\n\n-- Changes version 2.0 (26th Match 2022)\n-- All *meter device types can now be shown in the Yubii app so: \n   -- Changed main device SolarEdge Monitor to device type com.fibaro.powerMeter\n   -- Changed child device solarPower to device type com.fibaro.powerMeter\n   -- Changed child devices lastDayData, lastMonthData, lastYearData and lifeTimeData to com.fibaro.energyMeter\n   -- Configured storeEnergyData property of lastDayData, lastMonthData, lastYearData and lifeTimeData to com.fibaro.energyMeter to false\n   -- Configured storeEnergyData property of main device SolarEdge Monitor to true\n-- Added \"pause\" mode during sunset and sunrise. During this time NO requests will be send to the Cloud (because there is no solar production during that time). This saves on the ratelimit of 300 requests a day. \n-- Added Environmental Benefits to the labels, with an update once a day\n-- Added new QuickApp Variable systemUnits Metrics (kg) or Imperial (lb) for Environmental Benefits\n-- Added SolarEdge Installation details to the labels\n-- Added extra timeout and debug logging in case of a bad response \n-- Optimized some code\n\n-- Changes version 1.5 (5th March 2022)\n-- Improved the handling of decreasing values\n\n-- Changes version 1.4 (22nd February 2022)\n-- Changed rounding of all Wh values to one number after the decimal point, to prevent issues with decreasing values from SolarEdge Cloud\n-- Added extra check for decreasing values from SolarEdge Cloud lastDayData\n-- Changed handling bad responses from SolarEdge Cloud\n-- Removed QuickApp variable icon, icon can be selected in the user interface with the new firmware\n\n-- Changes version 1.3 (8th January 2022)\n-- Extra check on return value API for \"Too many requests\"\n\n-- Changes version 1.2 (26th August 2021)\n-- Added values update main device to power interface to show usage in Power consumption chart\n-- Solved a bug in the lifeTimeData.revenue existence check\n\n-- Changes version 1.1 (21th August 2021)\n-- Changed back currentPower measurement to Watt and lastDayData, lastMonthData to kWh (not to mess up statistics in Energy panel or InfluxDB/Grafana installations)\n-- Changed Child device currentPower to Main device with type com.fibaro.powerSensor (Watt). So the Main device will show the current power production, no Child device necessary. \n-- Changed Child device lastDayData to type com.fibaro.energyMeter (kWh). These values will be shown in the new energy panel. \n-- Added automaticaly change rateType interface of Child device lastDayData to \"production\"\n-- Added extra check on apiKey and siteID, if not OK then change to simulation mode\n-- SolarEdge Monitor settings currency and PiekPower also available in simulation mode\n-- Changed the lastUpdateTime to format dd-mm-yyyy hh:mm \n\n-- Changes version 1.0 (30th July 2021)\n-- Total m² solar panels added to log text and label text\n-- Check for API existance of lifeTimeData_revenue (not available in older firmware)\n-- Automatic conversion added for lastmonthData, lastYearData and lifetimeData production to Wh, kWh, MWh or GWh\n-- Automatic conversion added for currentPower to Watt, Kilowatt, Megawatt or Gigawatt (yes, Megawatt and Gigawatt is optimistic)\n-- Get the Peakpower and Currency settings from Inverter\n-- Peakpower added to label text and child device log text\n\n-- Changes version 0.3 (12th April 2021)\n-- Added last update date / time\n-- Cleaned up the code\n\n-- Changes version 0.2 (12th April 2021)\n-- Disabled revenue value (except for lifeTimeData)\n\n-- Changes version 0.1 (11th April 2021)\n-- First (test) version\n\n\n-- Variables (mandatory and created automatically): \n-- siteID = Site ID of your SolarEdge Inverter (see your Inverter Site Details)\n-- apiKey = API key of your SolarEdge Inverter (contact your installer if you don't have one)\n-- systemUnits = SystemUnits is Metrics (kg) or Imperial (Lb) (default is Metrics)\n-- solarM2 = The amount of m2 Solar Panels (use . for decimals) for calculating Solar Power m2 (default = 0)\n-- interval = The daily API limitation is 300 requests. The default request interval is 360 seconds (6 minutes)\n-- pause = Should the SolardEdge go in pause mode after sunset (default = true)\n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n\n\n-- No editing of this code is needed \n\n\nclass 'solarPower'(QuickAppChild)\nfunction solarPower:__init(dev)\n  QuickAppChild.__init(self,dev)\nend\nfunction solarPower:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.solarPower))\n  self:updateProperty(\"unit\", \"Watt/m²\")\n  self:updateProperty(\"log\", data.peakPower ..\" kWp / \" ..solarM2 ..\" m²\")\nend\n\nclass 'lastDayData'(QuickAppChild)\nfunction lastDayData:__init(dev)\n  QuickAppChild.__init(self,dev) \n  --self:trace(\"Retrieved value from lastDayData: \" ..self.properties.value) \n  data.prevlastDayData = string.format(\"%.1f\", self.properties.value) -- Initialize prevlastDayData with value of child device\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of SolarEdge lastDayData child device (\" ..self.id ..\") to production\")\n    if not fibaro.getValue(self.id, \"storeEnergyData\") then\n     self:updateProperty(\"storeEnergyData\", false)\n     self:warning(\"Configured storeEnergyData property of lastDayData child device (\" ..self.id ..\") to true\")\n    end\n  end\nend\nfunction lastDayData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastDayData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lastMonthData'(QuickAppChild)\nfunction lastMonthData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of SolarEdge lastMonthData child device (\" ..self.id ..\") to production\")\n    if not fibaro.getValue(self.id, \"storeEnergyData\") then\n      self:updateProperty(\"storeEnergyData\", false)\n      self:warning(\"Configured storeEnergyData property of lastMonthData child device (\" ..self.id ..\") to false\")\n    end\n  end\nend\nfunction lastMonthData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastMonthData))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lastYearData'(QuickAppChild)\nfunction lastYearData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of SolarEdge lastYearData child device (\" ..self.id ..\") to production\")\n    if not fibaro.getValue(self.id, \"storeEnergyData\") then\n      self:updateProperty(\"storeEnergyData\", false)\n      self:warning(\"Configured storeEnergyData property of lastYearData child device (\" ..self.id ..\") to false\")\n    end\n  end\nend\nfunction lastYearData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lastYearData))\n  self:updateProperty(\"unit\", data.lastYearUnit)\n  self:updateProperty(\"log\", \"\")\nend\n\nclass 'lifeTimeData'(QuickAppChild)\nfunction lifeTimeData:__init(dev)\n  QuickAppChild.__init(self,dev)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of SolarEdge lifeTimeData child device (\" ..self.id ..\") to production\")\n    if not fibaro.getValue(self.id, \"storeEnergyData\") then\n      self:updateProperty(\"storeEnergyData\", false)\n      self:warning(\"Configured storeEnergyData property of lifeTimeData child device (\" ..self.id ..\") to false\")\n    end\n  end\nend\nfunction lifeTimeData:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.lifeTimeData))\n  self:updateProperty(\"unit\", data.lifeTimeUnit)\n  self:updateProperty(\"log\", data.lifeTimeData_revenue)\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp functions\n\n\nfunction QuickApp:updateChildDevices()\n  for id,child in pairs(self.childDevices) do -- Update Child Devices\n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug\n  if tonumber(debugLevel) >= tonumber(level) then \n      self:debug(text)\n  end\nend\n\n\nfunction QuickApp:solarPower(power, m2) -- Calculate Solar Power M2\n  self:logging(3,\"QuickApp:solarPower()\")\n  if m2 > 0 and power > 0 then\n    solarPower = power / m2\n  else\n    solarPower = 0\n  end\n  return solarPower\nend\n\n\nfunction QuickApp:unitCheckWh(measurement) -- Set the measurement and unit to kWh, MWh or GWh\n  self:logging(3,\"QuickApp:unitCheckWh()\")\n  if measurement > 1000000000 then\n    return string.format(\"%.1f\",measurement/1000000000),\"GWh\"\n  elseif measurement > 1000000 then\n    return string.format(\"%.1f\",measurement/1000000),\"MWh\"\n  elseif measurement > 1000 then\n    return string.format(\"%.1f\",measurement/1000),\"kWh\"\n  else\n    return string.format(\"%.0f\",measurement),\"Wh\"\n  end\nend\n\n\nfunction QuickApp:simData() -- Simulate SolarEdge Monitor\n  self:logging(3,\"QuickApp:simData()\")\n  local jsonTableDetails = json.decode('{\"details\":{\"id\":1234567, \"name\":\"NAME-INSTALLATION\", \"accountId\":123456, \"status\":\"Active\", \"peakPower\":6.8, \"lastUpdateTime\":\"2022-02-01\", \"currency\":\"EUR\", \"installationDate\":\"2021-02-01\", \"ptoDate\":null, \"notes\":\"\", \"type\":\"Optimizers&Inverters\", \"location\":{\"country\":\"Earth\", \"city\":\"SimCity\", \"address\":\"Street1\", \"address2\":\"\", \"zip\":\"1234AA\", \"timeZone\":\"Europe/Amsterdam\", \"countryCode\":\"EU\"}, \"primaryModule\":{\"manufacturerName\":\"LG\", \"modelName\":\"LG340\", \"maximumPower\":340}, \"uris\":{\"DETAILS\":\"/site/1234567/details\", \"DATA_PERIOD\":\"/site/1234567/dataPeriod\", \"OVERVIEW\":\"/site/1234567/overview\"}, \"publicSettings\":{\"isPublic\":false}}}')\n  local jsonTableEnvBenefits = json.decode('{\"envBenefits\": { \"gasEmissionSaved\": {\"units\": \"kg\", \"co2\": 674.93066, \"so2\": 874.65515,\"nox\": 278.92545 }, \"treesPlanted\": 2.2555082200000003, \"lightBulbs\": 5217.4604 }}') -- Metrics response\n  -- local jsonTableEnvBenefits = json.decode('{\"envBenefits\": { \"gasEmissionSaved\": {\"units\": \"lb\", \"co2\": 1486.63, \"so2\": 1926.55, \"nox\": 614.37 }, \"treesPlanted\": 2.2555082200000003, \"lightBulbs\": 5217.4604 }}') -- Imperial response\n  local jsonTable = json.decode('{\"overview\":{\"lastUpdateTime\":\"2021-08-12 13:46:04\",\"lifeTimeData\":{\"energy\":7827878.0,\"revenue\":1728.5211},\"lastYearData\":{\"energy\":573242.0},\"lastMonthData\":{\"energy\":113386.0},\"lastDayData\":{\"energy\":7373.0},\"currentPower\":{\"power\":134.73499},\"measuredBy\":\"INVERTER\"}}') -- With revenue\n\n  self:valuesDetails(jsonTableDetails) -- Get the values from Details\n  self:valuesEnvBenefits(jsonTableEnvBenefits) -- Get the values from EnvBenefits\n  self:valuesOverview(jsonTable) -- Get the values from Overview\n  self:updateLabels() -- Update the labels\n  self:updateProperties() -- Update the properties\n  self:updateChildDevices() -- Update the Child Devices\n\n  self:logging(3,\"Timeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"QuickApp:updateProperties()\")\n  self:updateProperty(\"value\", tonumber(data.currentPower))\n  self:updateProperty(\"power\", tonumber(data.currentPower))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", data.lastUpdateTime)\nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"QuickApp:updateLabels()\")\n  local labelText = \"\"\n  if debugLevel == 4 then\n    labelText = labelText ..\"SIMULATION MODE\" ..\"\\n\\n\"\n  end\n  labelText = labelText ..\"Current power: \" ..data.currentPower ..\" Watt\" ..\"\\n\\n\"\n  labelText = labelText ..\"Peakpower: \" ..data.peakPower ..\" kWp\" ..\"\\n\"\n  labelText = labelText ..\"Solar power: \" ..data.solarPower ..\" Watt/m² (\" ..solarM2 ..\" m²)\" ..\"\\n\"\n  labelText = labelText ..\"Lastday: \" ..data.lastDayData ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Lastmonth: \" ..data.lastMonthData ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Lastyear: \" ..data.lastYearData ..\" \" ..data.lastYearUnit ..\"\\n\"\n  labelText = labelText ..\"Lifetime: \" ..data.lifeTimeData ..\" \" ..data.lifeTimeUnit ..\" (\" ..data.lifeTimeData_revenue ..\")\" ..\"\\n\\n\"\n  labelText = labelText ..\"Environmental Benefits:\" ..\"\\n\"\n  labelText = labelText ..\"CO2: \" ..data.co2 ..\" \" ..data.units ..\"\\n\"\n  labelText = labelText ..\"SO2: \" ..data.so2 ..\" \" ..data.units ..\"\\n\"\n  labelText = labelText ..\"NOX: \" ..data.nox ..\" \" ..data.units ..\"\\n\"\n  labelText = labelText ..\"Trees planted: \" ..data.treesPlanted ..\"\\n\"\n  labelText = labelText ..\"Lightbulbs: \" ..data.lightBulbs ..\"\\n\\n\"\n  labelText = labelText ..\"SolarEdge installation: \" ..\"\\n\"\n  labelText = labelText ..\"Type: \" ..data.type ..\"\\n\"\n  labelText = labelText ..\"Module: \" ..data.manufacturerName ..\"\\n\"\n  labelText = labelText ..\"Model: \" ..data.modelName ..\"\\n\"\n  labelText = labelText ..\"Maximum Power: \" ..data.maximumPower ..\"\\n\\n\"\n  labelText = labelText ..\"Last update: \" ..data.lastUpdateTime ..\"\\n\"\n\n  self:updateView(\"label\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:sunsetCheck() -- Check for sunset and sleep time\n  self:logging(3,\"QuickApp:sunsetCheck()\")\n  local sunset = fibaro.getValue(1, \"sunsetHour\")\n  if sunset < os.date(\"%H:%M\") and interval == tonumber(self:getVariable(\"interval\")) then -- Sunset change interval when interval is set regular\n    self:logging(3, \"Sunset at \" ..sunset ..\" < Current time \" ..os.date(\"%H:%M\"))\n    local pause = ((2400 - os.date(\"%H%M\")) + (fibaro.getValue(1, \"sunriseHour\"):gsub(\":\",\"\")))*60*60/100 - (interval*2) -- Time in seconds minus two interval rounds  \n    interval = tonumber(string.format(\"%.0f\", pause)) -- Set new interval time in seconds\n    self:logging(3,\"SET Timeout to \" ..interval ..\" seconds\")\n  elseif interval ~= tonumber(self:getVariable(\"interval\")) then-- Reset Reset interval to regular\n    interval = tonumber(self:getVariable(\"interval\")) \n    data.lastUpdateTime = \"Paused\" -- Change log text main device\n    self:logging(3,\"RESET Timeout to \" ..interval ..\" seconds\")\n  else  -- Daytime\n    self:logging(3, \"Sunset at \" ..sunset ..\" > Current time \" ..os.date(\"%H:%M\"))\n  end\nend\n\n\nfunction QuickApp:valuesCheck() -- Check for decreasing Cloud values for lastDayData\n  self:logging(3,\"QuickApp:valuesCheck()\")\n  self:logging(3,\"Previous lastDayData: \" ..data.prevlastDayData .. \" / Next lastDayData: \" ..data.lastDayData)\n  if tonumber(data.lastDayData) < tonumber(data.prevlastDayData) and tonumber(data.prevlastDayData) ~= 0 and tonumber(data.lastDayData) ~= 0 then -- Decreasing value\n    self:logging(2,\"Decreasing value lastDayData ignored (Energy Panel Child Device), previous value: \" ..data.prevlastDayData ..\" next value: \" ..data.lastDayData)\n    data.lastDayData = string.format(\"%.1f\", data.prevlastDayData) -- Restore previous (higher) lastDayData value\n  else\n    data.prevlastDayData = string.format(\"%.1f\", data.lastDayData) -- Save lastDayData to prevlastDayData only in case of increasing value\n  end\nend\n\n\nfunction QuickApp:valuesEnvBenefits(table) --Get the values from json file Environmental Benefits\n  self:logging(3,\"QuickApp:valuesEnvBenefits()\")\n  local jsonTableEnvBenefits = table\n  data.units = jsonTableEnvBenefits.envBenefits.gasEmissionSaved.units or \"kg\"\n  data.co2 = string.format(\"%.0f\", jsonTableEnvBenefits.envBenefits.gasEmissionSaved.co2 or \"0\") \n  data.so2 = string.format(\"%.0f\", jsonTableEnvBenefits.envBenefits.gasEmissionSaved.so2 or \"0\") \n  data.nox = string.format(\"%.0f\", jsonTableEnvBenefits.envBenefits.gasEmissionSaved.nox or \"0\") \n  data.treesPlanted = string.format(\"%.0f\", jsonTableEnvBenefits.envBenefits.treesPlanted or \"0\") \n  data.lightBulbs = string.format(\"%.0f\", jsonTableEnvBenefits.envBenefits.lightBulbs or \"0\") \nend\n\n\nfunction QuickApp:valuesOverview(table) -- Get the values from json file Overview\n  self:logging(3,\"QuickApp:valuesOverview()\")\n  local jsonTable = table\n  data.currentPower = string.format(\"%.0f\", jsonTable.overview.currentPower.power or \"0\")\n  data.solarPower = string.format(\"%.1f\",self:solarPower(tonumber(data.currentPower), tonumber(solarM2)))\n  data.lastDayData = string.format(\"%.1f\",jsonTable.overview.lastDayData.energy/1000 or \"0\")\n  data.lastMonthData = string.format(\"%.1f\",jsonTable.overview.lastMonthData.energy/1000 or \"0\")\n  data.lastYearData = jsonTable.overview.lastYearData.energy or \"0\"\n  data.lastYearData, data.lastYearUnit = self:unitCheckWh(tonumber(data.lastYearData)) -- Set measurement and unit to kWh, MWh or GWh\n  data.lifeTimeData = jsonTable.overview.lifeTimeData.energy or \"0\"\n  data.lifeTimeData, data.lifeTimeUnit = self:unitCheckWh(tonumber(data.lifeTimeData)) -- Set measurement and unit to kWh, MWh or GWh\n  data.lifeTimeData_revenue = string.format(\"%.2f\", jsonTable.overview.lifeTimeData.revenue or \"0.00\") ..\" \" ..data.currency -- lifeTimeData_revenue is not mandatory\n  data.lastUpdateTime = jsonTable.overview.lastUpdateTime or os.date(\"%d-%m-%Y %H:%M\")\n  local pattern = \"(%d+)-(%d+)-(%d+) (%d+):(%d+):(%d+)\"\n  local runyear, runmonth, runday, runhour, runminute, runseconds = data.lastUpdateTime:match(pattern)\n  local convertedTimestamp = os.time({year = runyear, month = runmonth, day = runday, hour = runhour, min = runminute, sec = runseconds})\n  data.lastUpdateTime = os.date(\"%d-%m-%Y %H:%M\", convertedTimestamp)\nend\n\n\nfunction QuickApp:valuesDetails(table) -- Get the values from json file Details\n  self:logging(3,\"QuickApp:valuesDetails()\")\n  local jsonTableDetails = table\n  data.peakPower = string.format(\"%.1f\", jsonTableDetails.details.peakPower or \"0\")\n  data.currency = jsonTableDetails.details.currency or \"EUR\"\n  data.type = jsonTableDetails.details.type or \"\"\n  data.manufacturerName = jsonTableDetails.details.primaryModule.manufacturerName or \"\"\n  data.modelName = jsonTableDetails.details.primaryModule.modelName or \"\"\n  data.maximumPower = string.format(\"%.0f\", jsonTableDetails.details.primaryModule.maximumPower or \"0\")\nend\n\n\nfunction QuickApp:getEnvBenefits() -- Get Environmental Benefits from the API\n  self:logging(3,\"QuickApp:getEnvBenefits()\")\n  local urlEnvBenefits = \"https://monitoringapi.solaredge.com/site/\"..self:getVariable('siteID')..\"/envBenefits?systemUnits=\"..string.lower(self:getVariable('systemUnits')):gsub(\"^%l\", string.upper)..\"&api_key=\"..self:getVariable('apiKey')\n  self:logging(2,\"URL EnvBenefits: \" ..urlEnvBenefits)\n\n  http:request(urlEnvBenefits, {\n    options={headers = {Accept = \"application/json\"},method = 'GET'}, success = function(response)\n      self:logging(3,\"response status: \" ..response.status)\n      self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n      self:logging(2,\"Response data: \" ..response.data)\n\n      if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n        self:warning(\"Temporarily no Environmental Benefits data from SolarEdge Monitor\")\n        self:logging(1,\"response status: \" ..response.status)\n        self:logging(1,\"Response data: \" ..response.data)\n        return\n      end\n\n      local jsonTableEnvBenefits = json.decode(response.data) -- JSON decode from api to lua-table\n\n      self:valuesEnvBenefits(jsonTableEnvBenefits) -- Get the values from EnvBenefits\n\n    end,\n    error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  }) \nend\n\n\nfunction QuickApp:getData() -- Get Production data from the API\n  self:logging(3,\"QuickApp:getData()\")\n  local urlOverview = \"https://monitoringapi.solaredge.com/site/\"..self:getVariable('siteID')..\"/overview.json?api_key=\"..self:getVariable('apiKey')\n  self:logging(2,\"URL Overview: \" ..urlOverview)\n\n  http:request(urlOverview, {\n    options={headers = {Accept = \"application/json\"},method = 'GET'}, success = function(response)\n      self:logging(3,\"response status: \" ..response.status)\n      self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n      self:logging(2,\"Response data: \" ..response.data)\n\n      if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n        self:warning(\"Temporarily no production data from SolarEdge Monitor\")\n        self:logging(1,\"response status: \" ..response.status)\n        self:logging(1,\"Response data: \" ..response.data)\n        fibaro.setTimeout(interval*1000, function() \n          return\n        end)\n      end\n\n      local jsonTable = json.decode(response.data) -- JSON decode from api to lua-table\n\n      self:valuesOverview(jsonTable) -- Get the values from Overview\n      self:valuesCheck() -- Check of Cloud decreasing values lastDayData\n      if pause then self:sunsetCheck() end -- Check for Sunset to set higher interval or return to origional setting\n      self:updateLabels() -- Update the labels\n      self:updateProperties() -- Update the properties\n      self:updateChildDevices() -- Update the Child Devices\n\n    end,\n    error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  }) \n  self:logging(3,\"Timeout \" ..interval ..\" seconds\")\n  fibaro.setTimeout(interval*1000, function()\n    self:logging(3,\"EnvBenefits countdown: \" ..tonumber(os.date(\"%H%M\"))-1200 ..\" < \" ..interval/60 ..\" and >= 0\")\n    if tonumber(os.date(\"%H%M\"))-1200 >= 0 and tonumber(os.date(\"%H%M\"))-1200 < (interval/60) then -- Get Environmental Benefits data once every day after 12:00 hour\n      self:logging(2,\"Get EnvBenefits at \" ..os.date(\"%d-%m-%Y %H:%M\"))\n      self:getEnvBenefits() -- Get Environmental Benefits data from SolarEdge Cloud\n    end\n    self:getData() -- Loop\n  end)\nend\n\n\nfunction QuickApp:getDetails() -- Get the settings from the API\n  self:logging(3,\"QuickApp:getDetails()\")\n  local urlDetails = \"https://monitoringapi.solaredge.com/site/\"..self:getVariable('siteID')..\"/details?api_key=\"..self:getVariable('apiKey')\n  self:logging(2,\"URL Details: \" ..urlDetails)\n  http:request(urlDetails, {\n    options={headers = {Accept = \"application/json\"},method = 'GET'}, success = function(response)\n      self:logging(3,\"response status: \" ..response.status)\n      self:logging(3,\"headers: \" ..response.headers[\"Content-Type\"])\n      self:logging(2,\"Response data: \" ..response.data)\n\n      if response.data == nil or response.data == \"\" or response.data == \"[]\" or response.status > 200 then -- Check for empty result\n        self:warning(\"Temporarily no details data from SolarEdge Monitor\")\n        self:logging(1,\"response status: \" ..response.status)\n        self:logging(1,\"Response data: \" ..response.data)\n        return\n      end\n\n      local jsonTableDetails = json.decode(response.data) -- JSON decode from api to lua-table\n\n      self:valuesDetails(jsonTableDetails) -- Get the values from Details\n\n    end,\n    error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  }) \nend\n\n\nfunction QuickApp:createVariables() -- Create all Variables \n  data = {}\n\n  data.peakPower = \"0\"\n  data.currency = \"EUR\"\n  data.type = \"\"\n  data.manufacturerName = \"\"\n  data.modelName = \"\"\n  data.maximumPower = \"\"\n\n  data.units = \"\"\n  data.co2 = \"0\"\n  data.so2 = \"0\"\n  data.nox = \"0\"\n  data.treesPlanted = \"0\"\n  data.lightBulbs = \"0\"\n\n  data.currentPower = \"0\"\n  data.solarPower = \"0\" \n  data.lastDayData = \"0\"\n  --data.prevlastDayData = \"0\" -- Is set in Child device class\n  data.lastMonthData = \"0\"\n  data.lastYearData= \"0\"\n  data.lastYearUnit= \"Wh\"\n  data.lifeTimeData= \"0\"\n  data.lifeTimeUnit= \"Wh\"\n  data.lifeTimeData_revenue = \"0\"\n  data.lastUpdateTime = \"\"\nend\n\n\nfunction QuickApp:getQuickAppVariables() -- Get all Quickapp Variables or create them\n  local siteID = self:getVariable(\"siteID\")\n  local apiKey = self:getVariable(\"apiKey\")\n  local systemUnits = string.lower(self:getVariable(\"systemUnits\")):gsub(\"^%l\", string.upper)\n  solarM2 = tonumber(self:getVariable(\"solarM2\"))\n  interval = tonumber(self:getVariable(\"interval\")) \n  httpTimeout = tonumber(self:getVariable(\"httpTimeout\")) \n  pause = string.lower(self:getVariable(\"pause\"))\n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  -- Check existence of the mandatory variables, if not, create them with default values\n  if siteID == \"\" or siteID == nil then\n    siteID = \"0\" -- This siteID is just an example, it is not working \n    self:setVariable(\"siteID\",siteID)\n    self:trace(\"Added QuickApp variable siteID\")\n  end\n if apiKey == \"\" or apiKey == nil then\n    apiKey = \"0\" -- This API key is just an example, it is not working\n    self:setVariable(\"apiKey\",apiKey)\n    self:trace(\"Added QuickApp variable apiKey\")\n  end \n if systemUnits ~= \"Metrics\" and systemUnits ~= \"Imperial\" then\n    systemUnits = \"Metrics\" -- Default systemUnits is Metrics (kg)\n    self:setVariable(\"systemUnits\",systemUnits)\n    self:trace(\"Added QuickApp variable systemUnits\")\n  end \n  if solarM2 == \"\" or solarM2 == nil then \n    solarM2 = \"0\" \n    self:setVariable(\"solarM2\",solarM2)\n    self:trace(\"Added QuickApp variable solarM2\")\n  end \n  if interval == \"\" or interval == nil then\n    interval = \"360\" -- The default interval is 6 minutes (360 seconds) \n    self:setVariable(\"interval\",interval)\n    self:trace(\"Added QuickApp variable interval\")\n    interval = tonumber(interval)\n  end\n  if httpTimeout == \"\" or httpTimeout == nil then\n    httpTimeout = \"5\" -- Default http timeout \n    self:setVariable(\"httpTimeout\",httpTimeout)\n    self:trace(\"Added QuickApp variable httpTimeout\")\n    httpTimeout = tonumber(httpTimeout)\n  end \n  if pause == \"\" or pause == nil then \n    pause = \"true\" \n    self:setVariable(\"pause\",pause)\n    self:trace(\"Added QuickApp variable pause\")\n  end  \n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default debug level\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  if apiKey == nil or apiKey == \"\"  or apiKey == \"0\" then -- Check mandatory apiKey \n    self:error(\"API key is empty! Get your API key from your installer and copy the apiKey to the quickapp variable\")\n    self:warning(\"No API Key: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty apiKey\n  end\n  if siteID == nil or siteID == \"\"  or siteID == \"0\" then -- Check mandatory siteID   \n    self:error(\"Site ID is empty! Get your siteID key from your inverter and copy the siteID to the quickapp variable\")\n    self:warning(\"No siteID: Switched to Simulation Mode\")\n    debugLevel = 4 -- Simulation mode due to empty siteID \n  end\n  if pause == \"true\" then \n    pause = true \n  else\n    pause = false\n  end\nend\n\n\nfunction QuickApp:setupChildDevices()\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"solarPower\", name=\"Solar Power\", type=\"com.fibaro.powerMeter\", value=0},\n      {className=\"lastDayData\", name=\"Last day\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"lastMonthData\", name=\"Last month\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"lastYearData\", name=\"Last year\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"lifeTimeData\", name=\"Lifetime\", type=\"com.fibaro.energyMeter\", value=0},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name, type=c.type, value=c.value, initialInterfaces = {}, }, \n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n\n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self:debug(\"QuickApp:onInit()\") \n  \n  self:createVariables() -- Early because of initialise the value for prevlastDayData\n  self:setupChildDevices() -- Setup all child devices\n\n  if not api.get(\"/devices/\"..self.id).enabled then\n    self:warning(\"Device\", fibaro.getName(plugin.mainDeviceId), \"is disabled\")\n    return\n  end\n\n  self:getQuickAppVariables() \n\n  http = net.HTTPClient({timeout=httpTimeout*1000})\n\n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getDetails() -- Get settings from SolarEdge Monitor from SolarEdge Cloud only at startup\n    self:getEnvBenefits() -- Get Environmental Benefits initial data from SolarEdge Cloud\n    self:getData() -- Go to loop getData()\n  end\nend\n\n-- EOF   "}]}
